# PROJECT ################################################################################

[project]
name = "wherefrom"
version = "0.1.0"
requires-python = ">= 3.12"
dependencies = []


# BUILDING ###############################################################################

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
directory = "artifacts"

[tool.hatch.build.targets.wheel]
packages = ["source/wherefrom"]


# TESTING ################################################################################

[tool.hatch.envs.test]
description = "Run the unit tests"
dependencies = [
    "coverage",
    "pytest",
]

[tool.hatch.envs.test.scripts]
# Don’t use these scripts directly; run `make test` instead.
run-tests = "coverage run -m pytest {args}"
generate-html-coverage-report = "coverage html {args}"
print-coverage-report = "coverage report {args}"
print-coverage-percentage = "coverage report --fail-under 0 --format total"

[tool.pytest.ini_options]
addopts = "--no-header"
python_files = ["*_tests.py"]

[tool.coverage.run]
source = ["source", "tests"]
branch = true

[tool.coverage.report]
fail_under = 100

[tool.coverage.html]
directory = "coverage"

[tool.hatch.envs.hatch-test.scripts]
# Don’t use Hatch’s build-in testing setup for now; that’s useful for testing against
# a number of different Python versions prior to release, but is somewhat inflexible,
# and during development, that inflexibility is annoying, and it’s sufficient to test
# against a single Python version.
run = "echo 'Not yet configured; use “hatch run test:test” for now'"
run-cov = "run"
cov-combine = ""
cov-report = ""
